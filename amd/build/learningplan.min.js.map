{"version":3,"file":"learningplan.min.js","sources":["../src/learningplan.js"],"sourcesContent":["define(['jquery', 'core/ajax'], function($, ajax) {\n    return {\n        init: function() {\n            $(document).on('click', '.remove-section-btn', function() {\n                let button = $(this);\n                let courseId = button.data('courseid');\n                let sectionId = button.data('sectionid');\n                let userId = button.data('userid');\n\n                // Removes the table row and the database entry when a section is removed from the learning plan\n                ajax.call([{\n                    methodname: 'local_learningplan_delete_section_data',\n                    args: {\n                        courseid: courseId,\n                        sectionid: sectionId,\n                        userid: userId\n                    },\n                    done: function() {\n                        $('tr[data-sectionid=\"' + sectionId + '\"]').fadeOut(300, function() {\n                            $(this).remove();\n                        });\n                    },\n                    fail: function(error) {\n                        console.error('Error when removing the section:', error);\n                    }\n                }]);\n            });\n\n            // Datepicker-Element\n            $(document).ready(function() {\n\n                // Event Listener für das Ändern des Datums\n                $('.datepicker').on('change', function() {\n                    let input = $(this);\n                    let courseId = input.data('courseid');\n                    let sectionId = input.data('sectionid');\n                    let userId = input.data('userid');\n                    let newDeadline = input.val();\n\n                    // API-Call zum Speichern des neuen Datums\n                    ajax.call([{\n                        methodname: 'local_learningplan_update_deadline',\n                        args: {\n                            courseid: courseId,\n                            sectionid: sectionId,\n                            userid: userId,\n                            deadline: newDeadline\n                        },\n                        done: function() {\n                            // Nothing to do\n                        },\n                        fail: function(error) {\n                            console.error('Error when saving the deadline:', error);\n                        }\n                    }]);\n                });\n            });\n\n\n            //  Dropdown element for the processing status\n            $('.progress-dropdown').on('change', function() {\n                let input = $(this);\n                let courseId = input.data('courseid');\n                let sectionId = input.data('sectionid');\n                let userId = input.data('userid');\n                let newProgress = input.val();\n\n                // API call to save the new processing status\n                ajax.call([{\n                    methodname: 'local_learningplan_update_progress',\n                    args: {\n                        courseid: courseId,\n                        sectionid: sectionId,\n                        userid: userId,\n                        progress: newProgress\n                    },\n                    done: function() {\n                        // Nothing to do\n                    },\n                    fail: function(error) {\n                        console.error('Error when saving the processing status:', error);\n                    }\n                }]);\n            });\n\n\n            // Search elements and filter options\n            $(document).ready(function() {\n                const searchInput = $(\"#searchInput\");\n                const filterSelect = $(\"#filterSelect\");\n\n                /**\n                 * Filters the table based on the input in the search field and the filter selection.\n                 */\n                function filterTable() {\n                    let searchText = searchInput.val().toLowerCase();\n                    let filterValue = filterSelect.val().toLowerCase();\n\n                    $(\".learningplan-section\").each(function() {\n                        let row = $(this);\n                        let courseName = row.find(\"td\").eq(0).text().toLowerCase();\n                        let sectionName = row.find(\"td\").eq(1).text().toLowerCase();\n                        let progress = row.data(\"progress\").toLowerCase();\n                        let timeCreated = row.find(\"td\").eq(2).text().trim();\n\n                        let deadlineInput = row.find(\"td\").eq(3).find(\"input\");\n                        let processingDeadline = deadlineInput.length ? deadlineInput.val() : \"\";\n                        processingDeadline = formatDateForSearch(processingDeadline);\n\n                        let matchesSearch =\n                            courseName.includes(searchText) ||\n                            sectionName.includes(searchText) ||\n                            timeCreated.includes(searchText) ||\n                            processingDeadline.includes(searchText);\n\n                        let matchesFilter = filterValue === \"\" || progress === filterValue;\n\n                        if (matchesSearch && matchesFilter) {\n                            row.show();\n                        } else {\n                            row.hide();\n                        }\n                    });\n                }\n\n                // Event Listener\n                searchInput.on(\"keyup\", filterTable);\n                filterSelect.on(\"change\", filterTable);\n\n\n                /**\n                 * Converts a date in the format ‘yyyy-mm-dd’ to ‘dd.mm.yyyy’.\n                 * @param {string} dateString - Date to be formatted\n                 */\n                function formatDateForSearch(dateString) {\n                    let parts = dateString.split(\"-\");\n                    if (parts.length === 3) {\n                        return `${parts[2]}.${parts[1]}.${parts[0]}`;\n                    }\n                    return dateString; // If the format does not fit, return the original\n                }\n            });\n\n            // Table sorting\n            $(document).ready(function() {\n                let sortDirection = {};\n\n                $(\".sortable\").on(\"click\", function() {\n                    let column = $(this).data(\"column\");\n                    let tableBody = $(\"#learningPlanTable tbody\");\n                    let rows = tableBody.find(\"tr\").toArray();\n\n                    // Alternating sorting direction\n                    sortDirection[column] = !sortDirection[column];\n\n                    rows.sort(function(rowA, rowB) {\n                        let cellA = getCellValue($(rowA), column);\n                        let cellB = getCellValue($(rowB), column);\n\n                        return (cellA < cellB ? -1 : 1) * (sortDirection[column] ? 1 : -1);\n                    });\n\n                    $.each(rows, function(index, row) {\n                        tableBody.append(row);\n                    });\n\n                    updateSortIndicators();\n                });\n\n                /**\n                 * Returns the index of a specific table column.\n                 * @param {string} column - The name of the column to be sorted by.\n                 * @returns {number} - The index of the column.\n                 */\n                function getColumnIndex(column) {\n                    let columns = [\"coursename\", \"sectionname\", \"addeddate\", \"processing_deadline\", \"progress\"];\n                    return columns.indexOf(column);\n                }\n\n                /**\n                 * Returns the content of a specific table column.\n                 * @param {string} row - The name of the row to be sorted by.\n                 * @param {string} column - The name of the column to be sorted by.\n                 * @returns {number} The index of the column.\n                 */\n                function getCellValue(row, column) {\n                    let cell = row.find(\"td\").eq(getColumnIndex(column));\n\n                    if (column === \"processing_deadline\") {\n                        return new Date(cell.find(\"input\").val()).getTime() || 0;\n                    }\n\n                    if (column === \"progress\") {\n                        return cell.find(\"select\").val();\n                    }\n\n                    if (column === \"addeddate\") {\n                        return new Date(cell.text().trim().split(\".\").reverse().join(\"-\")).getTime() || 0;\n                    }\n\n                    return cell.text().trim();\n                }\n\n                /**\n                 * Updates the arrows in the column headings, depending on the sorting direction.\n                 */\n                function updateSortIndicators() {\n                    $(\".sortable\").each(function() {\n                        let column = $(this).data(\"column\");\n                        if (sortDirection[column]) {\n                            $(this).addClass(\"sorted-asc\").removeClass(\"sorted-desc\");\n                        } else {\n                            $(this).addClass(\"sorted-desc\").removeClass(\"sorted-asc\");\n                        }\n                    });\n                }\n            });\n        }\n    };\n});\n"],"names":["define","$","ajax","init","document","on","button","this","courseId","data","sectionId","userId","call","methodname","args","courseid","sectionid","userid","done","fadeOut","remove","fail","error","console","ready","input","newDeadline","val","deadline","newProgress","progress","searchInput","filterSelect","filterTable","searchText","toLowerCase","filterValue","each","row","courseName","find","eq","text","sectionName","timeCreated","trim","deadlineInput","processingDeadline","length","dateString","parts","split","formatDateForSearch","includes","show","hide","sortDirection","getCellValue","column","cell","indexOf","getColumnIndex","Date","getTime","reverse","join","tableBody","rows","toArray","sort","rowA","rowB","index","append","addClass","removeClass"],"mappings":"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"}